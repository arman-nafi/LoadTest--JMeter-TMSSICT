/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 831.0, "minX": 0.0, "maxY": 33234.0, "series": [{"data": [[0.0, 842.0], [0.1, 842.0], [0.2, 842.0], [0.3, 842.0], [0.4, 842.0], [0.5, 842.0], [0.6, 842.0], [0.7, 842.0], [0.8, 842.0], [0.9, 842.0], [1.0, 853.0], [1.1, 853.0], [1.2, 853.0], [1.3, 853.0], [1.4, 853.0], [1.5, 853.0], [1.6, 853.0], [1.7, 853.0], [1.8, 853.0], [1.9, 853.0], [2.0, 854.0], [2.1, 854.0], [2.2, 854.0], [2.3, 854.0], [2.4, 854.0], [2.5, 854.0], [2.6, 854.0], [2.7, 854.0], [2.8, 854.0], [2.9, 854.0], [3.0, 857.0], [3.1, 857.0], [3.2, 857.0], [3.3, 857.0], [3.4, 857.0], [3.5, 857.0], [3.6, 857.0], [3.7, 857.0], [3.8, 857.0], [3.9, 857.0], [4.0, 857.0], [4.1, 857.0], [4.2, 857.0], [4.3, 857.0], [4.4, 857.0], [4.5, 857.0], [4.6, 857.0], [4.7, 857.0], [4.8, 857.0], [4.9, 857.0], [5.0, 860.0], [5.1, 860.0], [5.2, 860.0], [5.3, 860.0], [5.4, 860.0], [5.5, 860.0], [5.6, 860.0], [5.7, 860.0], [5.8, 860.0], [5.9, 860.0], [6.0, 861.0], [6.1, 861.0], [6.2, 861.0], [6.3, 861.0], [6.4, 861.0], [6.5, 861.0], [6.6, 861.0], [6.7, 861.0], [6.8, 861.0], [6.9, 861.0], [7.0, 861.0], [7.1, 861.0], [7.2, 861.0], [7.3, 861.0], [7.4, 861.0], [7.5, 861.0], [7.6, 861.0], [7.7, 861.0], [7.8, 861.0], [7.9, 861.0], [8.0, 862.0], [8.1, 862.0], [8.2, 862.0], [8.3, 862.0], [8.4, 862.0], [8.5, 862.0], [8.6, 862.0], [8.7, 862.0], [8.8, 862.0], [8.9, 862.0], [9.0, 862.0], [9.1, 862.0], [9.2, 862.0], [9.3, 862.0], [9.4, 862.0], [9.5, 862.0], [9.6, 862.0], [9.7, 862.0], [9.8, 862.0], [9.9, 862.0], [10.0, 863.0], [10.1, 863.0], [10.2, 863.0], [10.3, 863.0], [10.4, 863.0], [10.5, 863.0], [10.6, 863.0], [10.7, 863.0], [10.8, 863.0], [10.9, 863.0], [11.0, 866.0], [11.1, 866.0], [11.2, 866.0], [11.3, 866.0], [11.4, 866.0], [11.5, 866.0], [11.6, 866.0], [11.7, 866.0], [11.8, 866.0], [11.9, 866.0], [12.0, 866.0], [12.1, 866.0], [12.2, 866.0], [12.3, 866.0], [12.4, 866.0], [12.5, 866.0], [12.6, 866.0], [12.7, 866.0], [12.8, 866.0], [12.9, 866.0], [13.0, 866.0], [13.1, 866.0], [13.2, 866.0], [13.3, 866.0], [13.4, 866.0], [13.5, 866.0], [13.6, 866.0], [13.7, 866.0], [13.8, 866.0], [13.9, 866.0], [14.0, 866.0], [14.1, 866.0], [14.2, 866.0], [14.3, 866.0], [14.4, 866.0], [14.5, 866.0], [14.6, 866.0], [14.7, 866.0], [14.8, 866.0], [14.9, 866.0], [15.0, 867.0], [15.1, 867.0], [15.2, 867.0], [15.3, 867.0], [15.4, 867.0], [15.5, 867.0], [15.6, 867.0], [15.7, 867.0], [15.8, 867.0], [15.9, 867.0], [16.0, 869.0], [16.1, 869.0], [16.2, 869.0], [16.3, 869.0], [16.4, 869.0], [16.5, 869.0], [16.6, 869.0], [16.7, 869.0], [16.8, 869.0], [16.9, 869.0], [17.0, 870.0], [17.1, 870.0], [17.2, 870.0], [17.3, 870.0], [17.4, 870.0], [17.5, 870.0], [17.6, 870.0], [17.7, 870.0], [17.8, 870.0], [17.9, 870.0], [18.0, 871.0], [18.1, 871.0], [18.2, 871.0], [18.3, 871.0], [18.4, 871.0], [18.5, 871.0], [18.6, 871.0], [18.7, 871.0], [18.8, 871.0], [18.9, 871.0], [19.0, 873.0], [19.1, 873.0], [19.2, 873.0], [19.3, 873.0], [19.4, 873.0], [19.5, 873.0], [19.6, 873.0], [19.7, 873.0], [19.8, 873.0], [19.9, 873.0], [20.0, 874.0], [20.1, 874.0], [20.2, 874.0], [20.3, 874.0], [20.4, 874.0], [20.5, 874.0], [20.6, 874.0], [20.7, 874.0], [20.8, 874.0], [20.9, 874.0], [21.0, 875.0], [21.1, 875.0], [21.2, 875.0], [21.3, 875.0], [21.4, 875.0], [21.5, 875.0], [21.6, 875.0], [21.7, 875.0], [21.8, 875.0], [21.9, 875.0], [22.0, 876.0], [22.1, 876.0], [22.2, 876.0], [22.3, 876.0], [22.4, 876.0], [22.5, 876.0], [22.6, 876.0], [22.7, 876.0], [22.8, 876.0], [22.9, 876.0], [23.0, 877.0], [23.1, 877.0], [23.2, 877.0], [23.3, 877.0], [23.4, 877.0], [23.5, 877.0], [23.6, 877.0], [23.7, 877.0], [23.8, 877.0], [23.9, 877.0], [24.0, 878.0], [24.1, 878.0], [24.2, 878.0], [24.3, 878.0], [24.4, 878.0], [24.5, 878.0], [24.6, 878.0], [24.7, 878.0], [24.8, 878.0], [24.9, 878.0], [25.0, 879.0], [25.1, 879.0], [25.2, 879.0], [25.3, 879.0], [25.4, 879.0], [25.5, 879.0], [25.6, 879.0], [25.7, 879.0], [25.8, 879.0], [25.9, 879.0], [26.0, 880.0], [26.1, 880.0], [26.2, 880.0], [26.3, 880.0], [26.4, 880.0], [26.5, 880.0], [26.6, 880.0], [26.7, 880.0], [26.8, 880.0], [26.9, 880.0], [27.0, 885.0], [27.1, 885.0], [27.2, 885.0], [27.3, 885.0], [27.4, 885.0], [27.5, 885.0], [27.6, 885.0], [27.7, 885.0], [27.8, 885.0], [27.9, 885.0], [28.0, 887.0], [28.1, 887.0], [28.2, 887.0], [28.3, 887.0], [28.4, 887.0], [28.5, 887.0], [28.6, 887.0], [28.7, 887.0], [28.8, 887.0], [28.9, 887.0], [29.0, 900.0], [29.1, 900.0], [29.2, 900.0], [29.3, 900.0], [29.4, 900.0], [29.5, 900.0], [29.6, 900.0], [29.7, 900.0], [29.8, 900.0], [29.9, 900.0], [30.0, 7627.0], [30.1, 7627.0], [30.2, 7627.0], [30.3, 7627.0], [30.4, 7627.0], [30.5, 7627.0], [30.6, 7627.0], [30.7, 7627.0], [30.8, 7627.0], [30.9, 7627.0], [31.0, 8584.0], [31.1, 8584.0], [31.2, 8584.0], [31.3, 8584.0], [31.4, 8584.0], [31.5, 8584.0], [31.6, 8584.0], [31.7, 8584.0], [31.8, 8584.0], [31.9, 8584.0], [32.0, 8670.0], [32.1, 8670.0], [32.2, 8670.0], [32.3, 8670.0], [32.4, 8670.0], [32.5, 8670.0], [32.6, 8670.0], [32.7, 8670.0], [32.8, 8670.0], [32.9, 8670.0], [33.0, 8674.0], [33.1, 8674.0], [33.2, 8674.0], [33.3, 8674.0], [33.4, 8674.0], [33.5, 8674.0], [33.6, 8674.0], [33.7, 8674.0], [33.8, 8674.0], [33.9, 8674.0], [34.0, 8879.0], [34.1, 8879.0], [34.2, 8879.0], [34.3, 8879.0], [34.4, 8879.0], [34.5, 8879.0], [34.6, 8879.0], [34.7, 8879.0], [34.8, 8879.0], [34.9, 8879.0], [35.0, 8938.0], [35.1, 8938.0], [35.2, 8938.0], [35.3, 8938.0], [35.4, 8938.0], [35.5, 8938.0], [35.6, 8938.0], [35.7, 8938.0], [35.8, 8938.0], [35.9, 8938.0], [36.0, 9005.0], [36.1, 9005.0], [36.2, 9005.0], [36.3, 9005.0], [36.4, 9005.0], [36.5, 9005.0], [36.6, 9005.0], [36.7, 9005.0], [36.8, 9005.0], [36.9, 9005.0], [37.0, 9085.0], [37.1, 9085.0], [37.2, 9085.0], [37.3, 9085.0], [37.4, 9085.0], [37.5, 9085.0], [37.6, 9085.0], [37.7, 9085.0], [37.8, 9085.0], [37.9, 9085.0], [38.0, 9197.0], [38.1, 9197.0], [38.2, 9197.0], [38.3, 9197.0], [38.4, 9197.0], [38.5, 9197.0], [38.6, 9197.0], [38.7, 9197.0], [38.8, 9197.0], [38.9, 9197.0], [39.0, 9283.0], [39.1, 9283.0], [39.2, 9283.0], [39.3, 9283.0], [39.4, 9283.0], [39.5, 9283.0], [39.6, 9283.0], [39.7, 9283.0], [39.8, 9283.0], [39.9, 9283.0], [40.0, 9365.0], [40.1, 9365.0], [40.2, 9365.0], [40.3, 9365.0], [40.4, 9365.0], [40.5, 9365.0], [40.6, 9365.0], [40.7, 9365.0], [40.8, 9365.0], [40.9, 9365.0], [41.0, 9676.0], [41.1, 9676.0], [41.2, 9676.0], [41.3, 9676.0], [41.4, 9676.0], [41.5, 9676.0], [41.6, 9676.0], [41.7, 9676.0], [41.8, 9676.0], [41.9, 9676.0], [42.0, 9778.0], [42.1, 9778.0], [42.2, 9778.0], [42.3, 9778.0], [42.4, 9778.0], [42.5, 9778.0], [42.6, 9778.0], [42.7, 9778.0], [42.8, 9778.0], [42.9, 9778.0], [43.0, 10296.0], [43.1, 10296.0], [43.2, 10296.0], [43.3, 10296.0], [43.4, 10296.0], [43.5, 10296.0], [43.6, 10296.0], [43.7, 10296.0], [43.8, 10296.0], [43.9, 10296.0], [44.0, 10494.0], [44.1, 10494.0], [44.2, 10494.0], [44.3, 10494.0], [44.4, 10494.0], [44.5, 10494.0], [44.6, 10494.0], [44.7, 10494.0], [44.8, 10494.0], [44.9, 10494.0], [45.0, 13532.0], [45.1, 13532.0], [45.2, 13532.0], [45.3, 13532.0], [45.4, 13532.0], [45.5, 13532.0], [45.6, 13532.0], [45.7, 13532.0], [45.8, 13532.0], [45.9, 13532.0], [46.0, 14084.0], [46.1, 14084.0], [46.2, 14084.0], [46.3, 14084.0], [46.4, 14084.0], [46.5, 14084.0], [46.6, 14084.0], [46.7, 14084.0], [46.8, 14084.0], [46.9, 14084.0], [47.0, 14087.0], [47.1, 14087.0], [47.2, 14087.0], [47.3, 14087.0], [47.4, 14087.0], [47.5, 14087.0], [47.6, 14087.0], [47.7, 14087.0], [47.8, 14087.0], [47.9, 14087.0], [48.0, 14484.0], [48.1, 14484.0], [48.2, 14484.0], [48.3, 14484.0], [48.4, 14484.0], [48.5, 14484.0], [48.6, 14484.0], [48.7, 14484.0], [48.8, 14484.0], [48.9, 14484.0], [49.0, 14487.0], [49.1, 14487.0], [49.2, 14487.0], [49.3, 14487.0], [49.4, 14487.0], [49.5, 14487.0], [49.6, 14487.0], [49.7, 14487.0], [49.8, 14487.0], [49.9, 14487.0], [50.0, 15191.0], [50.1, 15191.0], [50.2, 15191.0], [50.3, 15191.0], [50.4, 15191.0], [50.5, 15191.0], [50.6, 15191.0], [50.7, 15191.0], [50.8, 15191.0], [50.9, 15191.0], [51.0, 15277.0], [51.1, 15277.0], [51.2, 15277.0], [51.3, 15277.0], [51.4, 15277.0], [51.5, 15277.0], [51.6, 15277.0], [51.7, 15277.0], [51.8, 15277.0], [51.9, 15277.0], [52.0, 15282.0], [52.1, 15282.0], [52.2, 15282.0], [52.3, 15282.0], [52.4, 15282.0], [52.5, 15282.0], [52.6, 15282.0], [52.7, 15282.0], [52.8, 15282.0], [52.9, 15282.0], [53.0, 15284.0], [53.1, 15284.0], [53.2, 15284.0], [53.3, 15284.0], [53.4, 15284.0], [53.5, 15284.0], [53.6, 15284.0], [53.7, 15284.0], [53.8, 15284.0], [53.9, 15284.0], [54.0, 15388.0], [54.1, 15388.0], [54.2, 15388.0], [54.3, 15388.0], [54.4, 15388.0], [54.5, 15388.0], [54.6, 15388.0], [54.7, 15388.0], [54.8, 15388.0], [54.9, 15388.0], [55.0, 15685.0], [55.1, 15685.0], [55.2, 15685.0], [55.3, 15685.0], [55.4, 15685.0], [55.5, 15685.0], [55.6, 15685.0], [55.7, 15685.0], [55.8, 15685.0], [55.9, 15685.0], [56.0, 15787.0], [56.1, 15787.0], [56.2, 15787.0], [56.3, 15787.0], [56.4, 15787.0], [56.5, 15787.0], [56.6, 15787.0], [56.7, 15787.0], [56.8, 15787.0], [56.9, 15787.0], [57.0, 16074.0], [57.1, 16074.0], [57.2, 16074.0], [57.3, 16074.0], [57.4, 16074.0], [57.5, 16074.0], [57.6, 16074.0], [57.7, 16074.0], [57.8, 16074.0], [57.9, 16074.0], [58.0, 16678.0], [58.1, 16678.0], [58.2, 16678.0], [58.3, 16678.0], [58.4, 16678.0], [58.5, 16678.0], [58.6, 16678.0], [58.7, 16678.0], [58.8, 16678.0], [58.9, 16678.0], [59.0, 19483.0], [59.1, 19483.0], [59.2, 19483.0], [59.3, 19483.0], [59.4, 19483.0], [59.5, 19483.0], [59.6, 19483.0], [59.7, 19483.0], [59.8, 19483.0], [59.9, 19483.0], [60.0, 20582.0], [60.1, 20582.0], [60.2, 20582.0], [60.3, 20582.0], [60.4, 20582.0], [60.5, 20582.0], [60.6, 20582.0], [60.7, 20582.0], [60.8, 20582.0], [60.9, 20582.0], [61.0, 20933.0], [61.1, 20933.0], [61.2, 20933.0], [61.3, 20933.0], [61.4, 20933.0], [61.5, 20933.0], [61.6, 20933.0], [61.7, 20933.0], [61.8, 20933.0], [61.9, 20933.0], [62.0, 20982.0], [62.1, 20982.0], [62.2, 20982.0], [62.3, 20982.0], [62.4, 20982.0], [62.5, 20982.0], [62.6, 20982.0], [62.7, 20982.0], [62.8, 20982.0], [62.9, 20982.0], [63.0, 21038.0], [63.1, 21038.0], [63.2, 21038.0], [63.3, 21038.0], [63.4, 21038.0], [63.5, 21038.0], [63.6, 21038.0], [63.7, 21038.0], [63.8, 21038.0], [63.9, 21038.0], [64.0, 21086.0], [64.1, 21086.0], [64.2, 21086.0], [64.3, 21086.0], [64.4, 21086.0], [64.5, 21086.0], [64.6, 21086.0], [64.7, 21086.0], [64.8, 21086.0], [64.9, 21086.0], [65.0, 21190.0], [65.1, 21190.0], [65.2, 21190.0], [65.3, 21190.0], [65.4, 21190.0], [65.5, 21190.0], [65.6, 21190.0], [65.7, 21190.0], [65.8, 21190.0], [65.9, 21190.0], [66.0, 21278.0], [66.1, 21278.0], [66.2, 21278.0], [66.3, 21278.0], [66.4, 21278.0], [66.5, 21278.0], [66.6, 21278.0], [66.7, 21278.0], [66.8, 21278.0], [66.9, 21278.0], [67.0, 21281.0], [67.1, 21281.0], [67.2, 21281.0], [67.3, 21281.0], [67.4, 21281.0], [67.5, 21281.0], [67.6, 21281.0], [67.7, 21281.0], [67.8, 21281.0], [67.9, 21281.0], [68.0, 21381.0], [68.1, 21381.0], [68.2, 21381.0], [68.3, 21381.0], [68.4, 21381.0], [68.5, 21381.0], [68.6, 21381.0], [68.7, 21381.0], [68.8, 21381.0], [68.9, 21381.0], [69.0, 21390.0], [69.1, 21390.0], [69.2, 21390.0], [69.3, 21390.0], [69.4, 21390.0], [69.5, 21390.0], [69.6, 21390.0], [69.7, 21390.0], [69.8, 21390.0], [69.9, 21390.0], [70.0, 22285.0], [70.1, 22285.0], [70.2, 22285.0], [70.3, 22285.0], [70.4, 22285.0], [70.5, 22285.0], [70.6, 22285.0], [70.7, 22285.0], [70.8, 22285.0], [70.9, 22285.0], [71.0, 22288.0], [71.1, 22288.0], [71.2, 22288.0], [71.3, 22288.0], [71.4, 22288.0], [71.5, 22288.0], [71.6, 22288.0], [71.7, 22288.0], [71.8, 22288.0], [71.9, 22288.0], [72.0, 22682.0], [72.1, 22682.0], [72.2, 22682.0], [72.3, 22682.0], [72.4, 22682.0], [72.5, 22682.0], [72.6, 22682.0], [72.7, 22682.0], [72.8, 22682.0], [72.9, 22682.0], [73.0, 24082.0], [73.1, 24082.0], [73.2, 24082.0], [73.3, 24082.0], [73.4, 24082.0], [73.5, 24082.0], [73.6, 24082.0], [73.7, 24082.0], [73.8, 24082.0], [73.9, 24082.0], [74.0, 25875.0], [74.1, 25875.0], [74.2, 25875.0], [74.3, 25875.0], [74.4, 25875.0], [74.5, 25875.0], [74.6, 25875.0], [74.7, 25875.0], [74.8, 25875.0], [74.9, 25875.0], [75.0, 25979.0], [75.1, 25979.0], [75.2, 25979.0], [75.3, 25979.0], [75.4, 25979.0], [75.5, 25979.0], [75.6, 25979.0], [75.7, 25979.0], [75.8, 25979.0], [75.9, 25979.0], [76.0, 26282.0], [76.1, 26282.0], [76.2, 26282.0], [76.3, 26282.0], [76.4, 26282.0], [76.5, 26282.0], [76.6, 26282.0], [76.7, 26282.0], [76.8, 26282.0], [76.9, 26282.0], [77.0, 26284.0], [77.1, 26284.0], [77.2, 26284.0], [77.3, 26284.0], [77.4, 26284.0], [77.5, 26284.0], [77.6, 26284.0], [77.7, 26284.0], [77.8, 26284.0], [77.9, 26284.0], [78.0, 26484.0], [78.1, 26484.0], [78.2, 26484.0], [78.3, 26484.0], [78.4, 26484.0], [78.5, 26484.0], [78.6, 26484.0], [78.7, 26484.0], [78.8, 26484.0], [78.9, 26484.0], [79.0, 26785.0], [79.1, 26785.0], [79.2, 26785.0], [79.3, 26785.0], [79.4, 26785.0], [79.5, 26785.0], [79.6, 26785.0], [79.7, 26785.0], [79.8, 26785.0], [79.9, 26785.0], [80.0, 26877.0], [80.1, 26877.0], [80.2, 26877.0], [80.3, 26877.0], [80.4, 26877.0], [80.5, 26877.0], [80.6, 26877.0], [80.7, 26877.0], [80.8, 26877.0], [80.9, 26877.0], [81.0, 26878.0], [81.1, 26878.0], [81.2, 26878.0], [81.3, 26878.0], [81.4, 26878.0], [81.5, 26878.0], [81.6, 26878.0], [81.7, 26878.0], [81.8, 26878.0], [81.9, 26878.0], [82.0, 26979.0], [82.1, 26979.0], [82.2, 26979.0], [82.3, 26979.0], [82.4, 26979.0], [82.5, 26979.0], [82.6, 26979.0], [82.7, 26979.0], [82.8, 26979.0], [82.9, 26979.0], [83.0, 27283.0], [83.1, 27283.0], [83.2, 27283.0], [83.3, 27283.0], [83.4, 27283.0], [83.5, 27283.0], [83.6, 27283.0], [83.7, 27283.0], [83.8, 27283.0], [83.9, 27283.0], [84.0, 27388.0], [84.1, 27388.0], [84.2, 27388.0], [84.3, 27388.0], [84.4, 27388.0], [84.5, 27388.0], [84.6, 27388.0], [84.7, 27388.0], [84.8, 27388.0], [84.9, 27388.0], [85.0, 27488.0], [85.1, 27488.0], [85.2, 27488.0], [85.3, 27488.0], [85.4, 27488.0], [85.5, 27488.0], [85.6, 27488.0], [85.7, 27488.0], [85.8, 27488.0], [85.9, 27488.0], [86.0, 27589.0], [86.1, 27589.0], [86.2, 27589.0], [86.3, 27589.0], [86.4, 27589.0], [86.5, 27589.0], [86.6, 27589.0], [86.7, 27589.0], [86.8, 27589.0], [86.9, 27589.0], [87.0, 28385.0], [87.1, 28385.0], [87.2, 28385.0], [87.3, 28385.0], [87.4, 28385.0], [87.5, 28385.0], [87.6, 28385.0], [87.7, 28385.0], [87.8, 28385.0], [87.9, 28385.0], [88.0, 30190.0], [88.1, 30190.0], [88.2, 30190.0], [88.3, 30190.0], [88.4, 30190.0], [88.5, 30190.0], [88.6, 30190.0], [88.7, 30190.0], [88.8, 30190.0], [88.9, 30190.0], [89.0, 31489.0], [89.1, 31489.0], [89.2, 31489.0], [89.3, 31489.0], [89.4, 31489.0], [89.5, 31489.0], [89.6, 31489.0], [89.7, 31489.0], [89.8, 31489.0], [89.9, 31489.0], [90.0, 31579.0], [90.1, 31579.0], [90.2, 31579.0], [90.3, 31579.0], [90.4, 31579.0], [90.5, 31579.0], [90.6, 31579.0], [90.7, 31579.0], [90.8, 31579.0], [90.9, 31579.0], [91.0, 31693.0], [91.1, 31693.0], [91.2, 31693.0], [91.3, 31693.0], [91.4, 31693.0], [91.5, 31693.0], [91.6, 31693.0], [91.7, 31693.0], [91.8, 31693.0], [91.9, 31693.0], [92.0, 31755.0], [92.1, 31755.0], [92.2, 31755.0], [92.3, 31755.0], [92.4, 31755.0], [92.5, 31755.0], [92.6, 31755.0], [92.7, 31755.0], [92.8, 31755.0], [92.9, 31755.0], [93.0, 31879.0], [93.1, 31879.0], [93.2, 31879.0], [93.3, 31879.0], [93.4, 31879.0], [93.5, 31879.0], [93.6, 31879.0], [93.7, 31879.0], [93.8, 31879.0], [93.9, 31879.0], [94.0, 31893.0], [94.1, 31893.0], [94.2, 31893.0], [94.3, 31893.0], [94.4, 31893.0], [94.5, 31893.0], [94.6, 31893.0], [94.7, 31893.0], [94.8, 31893.0], [94.9, 31893.0], [95.0, 31993.0], [95.1, 31993.0], [95.2, 31993.0], [95.3, 31993.0], [95.4, 31993.0], [95.5, 31993.0], [95.6, 31993.0], [95.7, 31993.0], [95.8, 31993.0], [95.9, 31993.0], [96.0, 32182.0], [96.1, 32182.0], [96.2, 32182.0], [96.3, 32182.0], [96.4, 32182.0], [96.5, 32182.0], [96.6, 32182.0], [96.7, 32182.0], [96.8, 32182.0], [96.9, 32182.0], [97.0, 32187.0], [97.1, 32187.0], [97.2, 32187.0], [97.3, 32187.0], [97.4, 32187.0], [97.5, 32187.0], [97.6, 32187.0], [97.7, 32187.0], [97.8, 32187.0], [97.9, 32187.0], [98.0, 32378.0], [98.1, 32378.0], [98.2, 32378.0], [98.3, 32378.0], [98.4, 32378.0], [98.5, 32378.0], [98.6, 32378.0], [98.7, 32378.0], [98.8, 32378.0], [98.9, 32378.0], [99.0, 32381.0], [99.1, 32381.0], [99.2, 32381.0], [99.3, 32381.0], [99.4, 32381.0], [99.5, 32381.0], [99.6, 32381.0], [99.7, 32381.0], [99.8, 32381.0], [99.9, 32381.0]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[0.0, 831.0], [0.1, 831.0], [0.2, 831.0], [0.3, 831.0], [0.4, 831.0], [0.5, 831.0], [0.6, 831.0], [0.7, 831.0], [0.8, 831.0], [0.9, 831.0], [1.0, 834.0], [1.1, 834.0], [1.2, 834.0], [1.3, 834.0], [1.4, 834.0], [1.5, 834.0], [1.6, 834.0], [1.7, 834.0], [1.8, 834.0], [1.9, 834.0], [2.0, 838.0], [2.1, 838.0], [2.2, 838.0], [2.3, 838.0], [2.4, 838.0], [2.5, 838.0], [2.6, 838.0], [2.7, 838.0], [2.8, 838.0], [2.9, 838.0], [3.0, 839.0], [3.1, 839.0], [3.2, 839.0], [3.3, 839.0], [3.4, 839.0], [3.5, 839.0], [3.6, 839.0], [3.7, 839.0], [3.8, 839.0], [3.9, 839.0], [4.0, 839.0], [4.1, 839.0], [4.2, 839.0], [4.3, 839.0], [4.4, 839.0], [4.5, 839.0], [4.6, 839.0], [4.7, 839.0], [4.8, 839.0], [4.9, 839.0], [5.0, 839.0], [5.1, 839.0], [5.2, 839.0], [5.3, 839.0], [5.4, 839.0], [5.5, 839.0], [5.6, 839.0], [5.7, 839.0], [5.8, 839.0], [5.9, 839.0], [6.0, 840.0], [6.1, 840.0], [6.2, 840.0], [6.3, 840.0], [6.4, 840.0], [6.5, 840.0], [6.6, 840.0], [6.7, 840.0], [6.8, 840.0], [6.9, 840.0], [7.0, 840.0], [7.1, 840.0], [7.2, 840.0], [7.3, 840.0], [7.4, 840.0], [7.5, 840.0], [7.6, 840.0], [7.7, 840.0], [7.8, 840.0], [7.9, 840.0], [8.0, 841.0], [8.1, 841.0], [8.2, 841.0], [8.3, 841.0], [8.4, 841.0], [8.5, 841.0], [8.6, 841.0], [8.7, 841.0], [8.8, 841.0], [8.9, 841.0], [9.0, 841.0], [9.1, 841.0], [9.2, 841.0], [9.3, 841.0], [9.4, 841.0], [9.5, 841.0], [9.6, 841.0], [9.7, 841.0], [9.8, 841.0], [9.9, 841.0], [10.0, 841.0], [10.1, 841.0], [10.2, 841.0], [10.3, 841.0], [10.4, 841.0], [10.5, 841.0], [10.6, 841.0], [10.7, 841.0], [10.8, 841.0], [10.9, 841.0], [11.0, 842.0], [11.1, 842.0], [11.2, 842.0], [11.3, 842.0], [11.4, 842.0], [11.5, 842.0], [11.6, 842.0], [11.7, 842.0], [11.8, 842.0], [11.9, 842.0], [12.0, 843.0], [12.1, 843.0], [12.2, 843.0], [12.3, 843.0], [12.4, 843.0], [12.5, 843.0], [12.6, 843.0], [12.7, 843.0], [12.8, 843.0], [12.9, 843.0], [13.0, 843.0], [13.1, 843.0], [13.2, 843.0], [13.3, 843.0], [13.4, 843.0], [13.5, 843.0], [13.6, 843.0], [13.7, 843.0], [13.8, 843.0], [13.9, 843.0], [14.0, 844.0], [14.1, 844.0], [14.2, 844.0], [14.3, 844.0], [14.4, 844.0], [14.5, 844.0], [14.6, 844.0], [14.7, 844.0], [14.8, 844.0], [14.9, 844.0], [15.0, 844.0], [15.1, 844.0], [15.2, 844.0], [15.3, 844.0], [15.4, 844.0], [15.5, 844.0], [15.6, 844.0], [15.7, 844.0], [15.8, 844.0], [15.9, 844.0], [16.0, 845.0], [16.1, 845.0], [16.2, 845.0], [16.3, 845.0], [16.4, 845.0], [16.5, 845.0], [16.6, 845.0], [16.7, 845.0], [16.8, 845.0], [16.9, 845.0], [17.0, 846.0], [17.1, 846.0], [17.2, 846.0], [17.3, 846.0], [17.4, 846.0], [17.5, 846.0], [17.6, 846.0], [17.7, 846.0], [17.8, 846.0], [17.9, 846.0], [18.0, 846.0], [18.1, 846.0], [18.2, 846.0], [18.3, 846.0], [18.4, 846.0], [18.5, 846.0], [18.6, 846.0], [18.7, 846.0], [18.8, 846.0], [18.9, 846.0], [19.0, 846.0], [19.1, 846.0], [19.2, 846.0], [19.3, 846.0], [19.4, 846.0], [19.5, 846.0], [19.6, 846.0], [19.7, 846.0], [19.8, 846.0], [19.9, 846.0], [20.0, 846.0], [20.1, 846.0], [20.2, 846.0], [20.3, 846.0], [20.4, 846.0], [20.5, 846.0], [20.6, 846.0], [20.7, 846.0], [20.8, 846.0], [20.9, 846.0], [21.0, 847.0], [21.1, 847.0], [21.2, 847.0], [21.3, 847.0], [21.4, 847.0], [21.5, 847.0], [21.6, 847.0], [21.7, 847.0], [21.8, 847.0], [21.9, 847.0], [22.0, 847.0], [22.1, 847.0], [22.2, 847.0], [22.3, 847.0], [22.4, 847.0], [22.5, 847.0], [22.6, 847.0], [22.7, 847.0], [22.8, 847.0], [22.9, 847.0], [23.0, 847.0], [23.1, 847.0], [23.2, 847.0], [23.3, 847.0], [23.4, 847.0], [23.5, 847.0], [23.6, 847.0], [23.7, 847.0], [23.8, 847.0], [23.9, 847.0], [24.0, 847.0], [24.1, 847.0], [24.2, 847.0], [24.3, 847.0], [24.4, 847.0], [24.5, 847.0], [24.6, 847.0], [24.7, 847.0], [24.8, 847.0], [24.9, 847.0], [25.0, 847.0], [25.1, 847.0], [25.2, 847.0], [25.3, 847.0], [25.4, 847.0], [25.5, 847.0], [25.6, 847.0], [25.7, 847.0], [25.8, 847.0], [25.9, 847.0], [26.0, 847.0], [26.1, 847.0], [26.2, 847.0], [26.3, 847.0], [26.4, 847.0], [26.5, 847.0], [26.6, 847.0], [26.7, 847.0], [26.8, 847.0], [26.9, 847.0], [27.0, 847.0], [27.1, 847.0], [27.2, 847.0], [27.3, 847.0], [27.4, 847.0], [27.5, 847.0], [27.6, 847.0], [27.7, 847.0], [27.8, 847.0], [27.9, 847.0], [28.0, 847.0], [28.1, 847.0], [28.2, 847.0], [28.3, 847.0], [28.4, 847.0], [28.5, 847.0], [28.6, 847.0], [28.7, 847.0], [28.8, 847.0], [28.9, 847.0], [29.0, 848.0], [29.1, 848.0], [29.2, 848.0], [29.3, 848.0], [29.4, 848.0], [29.5, 848.0], [29.6, 848.0], [29.7, 848.0], [29.8, 848.0], [29.9, 848.0], [30.0, 848.0], [30.1, 848.0], [30.2, 848.0], [30.3, 848.0], [30.4, 848.0], [30.5, 848.0], [30.6, 848.0], [30.7, 848.0], [30.8, 848.0], [30.9, 848.0], [31.0, 848.0], [31.1, 848.0], [31.2, 848.0], [31.3, 848.0], [31.4, 848.0], [31.5, 848.0], [31.6, 848.0], [31.7, 848.0], [31.8, 848.0], [31.9, 848.0], [32.0, 848.0], [32.1, 848.0], [32.2, 848.0], [32.3, 848.0], [32.4, 848.0], [32.5, 848.0], [32.6, 848.0], [32.7, 848.0], [32.8, 848.0], [32.9, 848.0], [33.0, 848.0], [33.1, 848.0], [33.2, 848.0], [33.3, 848.0], [33.4, 848.0], [33.5, 848.0], [33.6, 848.0], [33.7, 848.0], [33.8, 848.0], [33.9, 848.0], [34.0, 849.0], [34.1, 849.0], [34.2, 849.0], [34.3, 849.0], [34.4, 849.0], [34.5, 849.0], [34.6, 849.0], [34.7, 849.0], [34.8, 849.0], [34.9, 849.0], [35.0, 849.0], [35.1, 849.0], [35.2, 849.0], [35.3, 849.0], [35.4, 849.0], [35.5, 849.0], [35.6, 849.0], [35.7, 849.0], [35.8, 849.0], [35.9, 849.0], [36.0, 849.0], [36.1, 849.0], [36.2, 849.0], [36.3, 849.0], [36.4, 849.0], [36.5, 849.0], [36.6, 849.0], [36.7, 849.0], [36.8, 849.0], [36.9, 849.0], [37.0, 850.0], [37.1, 850.0], [37.2, 850.0], [37.3, 850.0], [37.4, 850.0], [37.5, 850.0], [37.6, 850.0], [37.7, 850.0], [37.8, 850.0], [37.9, 850.0], [38.0, 850.0], [38.1, 850.0], [38.2, 850.0], [38.3, 850.0], [38.4, 850.0], [38.5, 850.0], [38.6, 850.0], [38.7, 850.0], [38.8, 850.0], [38.9, 850.0], [39.0, 851.0], [39.1, 851.0], [39.2, 851.0], [39.3, 851.0], [39.4, 851.0], [39.5, 851.0], [39.6, 851.0], [39.7, 851.0], [39.8, 851.0], [39.9, 851.0], [40.0, 851.0], [40.1, 851.0], [40.2, 851.0], [40.3, 851.0], [40.4, 851.0], [40.5, 851.0], [40.6, 851.0], [40.7, 851.0], [40.8, 851.0], [40.9, 851.0], [41.0, 851.0], [41.1, 851.0], [41.2, 851.0], [41.3, 851.0], [41.4, 851.0], [41.5, 851.0], [41.6, 851.0], [41.7, 851.0], [41.8, 851.0], [41.9, 851.0], [42.0, 851.0], [42.1, 851.0], [42.2, 851.0], [42.3, 851.0], [42.4, 851.0], [42.5, 851.0], [42.6, 851.0], [42.7, 851.0], [42.8, 851.0], [42.9, 851.0], [43.0, 851.0], [43.1, 851.0], [43.2, 851.0], [43.3, 851.0], [43.4, 851.0], [43.5, 851.0], [43.6, 851.0], [43.7, 851.0], [43.8, 851.0], [43.9, 851.0], [44.0, 851.0], [44.1, 851.0], [44.2, 851.0], [44.3, 851.0], [44.4, 851.0], [44.5, 851.0], [44.6, 851.0], [44.7, 851.0], [44.8, 851.0], [44.9, 851.0], [45.0, 851.0], [45.1, 851.0], [45.2, 851.0], [45.3, 851.0], [45.4, 851.0], [45.5, 851.0], [45.6, 851.0], [45.7, 851.0], [45.8, 851.0], [45.9, 851.0], [46.0, 851.0], [46.1, 851.0], [46.2, 851.0], [46.3, 851.0], [46.4, 851.0], [46.5, 851.0], [46.6, 851.0], [46.7, 851.0], [46.8, 851.0], [46.9, 851.0], [47.0, 851.0], [47.1, 851.0], [47.2, 851.0], [47.3, 851.0], [47.4, 851.0], [47.5, 851.0], [47.6, 851.0], [47.7, 851.0], [47.8, 851.0], [47.9, 851.0], [48.0, 852.0], [48.1, 852.0], [48.2, 852.0], [48.3, 852.0], [48.4, 852.0], [48.5, 852.0], [48.6, 852.0], [48.7, 852.0], [48.8, 852.0], [48.9, 852.0], [49.0, 852.0], [49.1, 852.0], [49.2, 852.0], [49.3, 852.0], [49.4, 852.0], [49.5, 852.0], [49.6, 852.0], [49.7, 852.0], [49.8, 852.0], [49.9, 852.0], [50.0, 852.0], [50.1, 852.0], [50.2, 852.0], [50.3, 852.0], [50.4, 852.0], [50.5, 852.0], [50.6, 852.0], [50.7, 852.0], [50.8, 852.0], [50.9, 852.0], [51.0, 852.0], [51.1, 852.0], [51.2, 852.0], [51.3, 852.0], [51.4, 852.0], [51.5, 852.0], [51.6, 852.0], [51.7, 852.0], [51.8, 852.0], [51.9, 852.0], [52.0, 852.0], [52.1, 852.0], [52.2, 852.0], [52.3, 852.0], [52.4, 852.0], [52.5, 852.0], [52.6, 852.0], [52.7, 852.0], [52.8, 852.0], [52.9, 852.0], [53.0, 854.0], [53.1, 854.0], [53.2, 854.0], [53.3, 854.0], [53.4, 854.0], [53.5, 854.0], [53.6, 854.0], [53.7, 854.0], [53.8, 854.0], [53.9, 854.0], [54.0, 854.0], [54.1, 854.0], [54.2, 854.0], [54.3, 854.0], [54.4, 854.0], [54.5, 854.0], [54.6, 854.0], [54.7, 854.0], [54.8, 854.0], [54.9, 854.0], [55.0, 854.0], [55.1, 854.0], [55.2, 854.0], [55.3, 854.0], [55.4, 854.0], [55.5, 854.0], [55.6, 854.0], [55.7, 854.0], [55.8, 854.0], [55.9, 854.0], [56.0, 854.0], [56.1, 854.0], [56.2, 854.0], [56.3, 854.0], [56.4, 854.0], [56.5, 854.0], [56.6, 854.0], [56.7, 854.0], [56.8, 854.0], [56.9, 854.0], [57.0, 854.0], [57.1, 854.0], [57.2, 854.0], [57.3, 854.0], [57.4, 854.0], [57.5, 854.0], [57.6, 854.0], [57.7, 854.0], [57.8, 854.0], [57.9, 854.0], [58.0, 854.0], [58.1, 854.0], [58.2, 854.0], [58.3, 854.0], [58.4, 854.0], [58.5, 854.0], [58.6, 854.0], [58.7, 854.0], [58.8, 854.0], [58.9, 854.0], [59.0, 855.0], [59.1, 855.0], [59.2, 855.0], [59.3, 855.0], [59.4, 855.0], [59.5, 855.0], [59.6, 855.0], [59.7, 855.0], [59.8, 855.0], [59.9, 855.0], [60.0, 855.0], [60.1, 855.0], [60.2, 855.0], [60.3, 855.0], [60.4, 855.0], [60.5, 855.0], [60.6, 855.0], [60.7, 855.0], [60.8, 855.0], [60.9, 855.0], [61.0, 856.0], [61.1, 856.0], [61.2, 856.0], [61.3, 856.0], [61.4, 856.0], [61.5, 856.0], [61.6, 856.0], [61.7, 856.0], [61.8, 856.0], [61.9, 856.0], [62.0, 856.0], [62.1, 856.0], [62.2, 856.0], [62.3, 856.0], [62.4, 856.0], [62.5, 856.0], [62.6, 856.0], [62.7, 856.0], [62.8, 856.0], [62.9, 856.0], [63.0, 856.0], [63.1, 856.0], [63.2, 856.0], [63.3, 856.0], [63.4, 856.0], [63.5, 856.0], [63.6, 856.0], [63.7, 856.0], [63.8, 856.0], [63.9, 856.0], [64.0, 856.0], [64.1, 856.0], [64.2, 856.0], [64.3, 856.0], [64.4, 856.0], [64.5, 856.0], [64.6, 856.0], [64.7, 856.0], [64.8, 856.0], [64.9, 856.0], [65.0, 856.0], [65.1, 856.0], [65.2, 856.0], [65.3, 856.0], [65.4, 856.0], [65.5, 856.0], [65.6, 856.0], [65.7, 856.0], [65.8, 856.0], [65.9, 856.0], [66.0, 856.0], [66.1, 856.0], [66.2, 856.0], [66.3, 856.0], [66.4, 856.0], [66.5, 856.0], [66.6, 856.0], [66.7, 856.0], [66.8, 856.0], [66.9, 856.0], [67.0, 857.0], [67.1, 857.0], [67.2, 857.0], [67.3, 857.0], [67.4, 857.0], [67.5, 857.0], [67.6, 857.0], [67.7, 857.0], [67.8, 857.0], [67.9, 857.0], [68.0, 858.0], [68.1, 858.0], [68.2, 858.0], [68.3, 858.0], [68.4, 858.0], [68.5, 858.0], [68.6, 858.0], [68.7, 858.0], [68.8, 858.0], [68.9, 858.0], [69.0, 858.0], [69.1, 858.0], [69.2, 858.0], [69.3, 858.0], [69.4, 858.0], [69.5, 858.0], [69.6, 858.0], [69.7, 858.0], [69.8, 858.0], [69.9, 858.0], [70.0, 858.0], [70.1, 858.0], [70.2, 858.0], [70.3, 858.0], [70.4, 858.0], [70.5, 858.0], [70.6, 858.0], [70.7, 858.0], [70.8, 858.0], [70.9, 858.0], [71.0, 859.0], [71.1, 859.0], [71.2, 859.0], [71.3, 859.0], [71.4, 859.0], [71.5, 859.0], [71.6, 859.0], [71.7, 859.0], [71.8, 859.0], [71.9, 859.0], [72.0, 859.0], [72.1, 859.0], [72.2, 859.0], [72.3, 859.0], [72.4, 859.0], [72.5, 859.0], [72.6, 859.0], [72.7, 859.0], [72.8, 859.0], [72.9, 859.0], [73.0, 860.0], [73.1, 860.0], [73.2, 860.0], [73.3, 860.0], [73.4, 860.0], [73.5, 860.0], [73.6, 860.0], [73.7, 860.0], [73.8, 860.0], [73.9, 860.0], [74.0, 860.0], [74.1, 860.0], [74.2, 860.0], [74.3, 860.0], [74.4, 860.0], [74.5, 860.0], [74.6, 860.0], [74.7, 860.0], [74.8, 860.0], [74.9, 860.0], [75.0, 861.0], [75.1, 861.0], [75.2, 861.0], [75.3, 861.0], [75.4, 861.0], [75.5, 861.0], [75.6, 861.0], [75.7, 861.0], [75.8, 861.0], [75.9, 861.0], [76.0, 861.0], [76.1, 861.0], [76.2, 861.0], [76.3, 861.0], [76.4, 861.0], [76.5, 861.0], [76.6, 861.0], [76.7, 861.0], [76.8, 861.0], [76.9, 861.0], [77.0, 861.0], [77.1, 861.0], [77.2, 861.0], [77.3, 861.0], [77.4, 861.0], [77.5, 861.0], [77.6, 861.0], [77.7, 861.0], [77.8, 861.0], [77.9, 861.0], [78.0, 861.0], [78.1, 861.0], [78.2, 861.0], [78.3, 861.0], [78.4, 861.0], [78.5, 861.0], [78.6, 861.0], [78.7, 861.0], [78.8, 861.0], [78.9, 861.0], [79.0, 861.0], [79.1, 861.0], [79.2, 861.0], [79.3, 861.0], [79.4, 861.0], [79.5, 861.0], [79.6, 861.0], [79.7, 861.0], [79.8, 861.0], [79.9, 861.0], [80.0, 861.0], [80.1, 861.0], [80.2, 861.0], [80.3, 861.0], [80.4, 861.0], [80.5, 861.0], [80.6, 861.0], [80.7, 861.0], [80.8, 861.0], [80.9, 861.0], [81.0, 862.0], [81.1, 862.0], [81.2, 862.0], [81.3, 862.0], [81.4, 862.0], [81.5, 862.0], [81.6, 862.0], [81.7, 862.0], [81.8, 862.0], [81.9, 862.0], [82.0, 863.0], [82.1, 863.0], [82.2, 863.0], [82.3, 863.0], [82.4, 863.0], [82.5, 863.0], [82.6, 863.0], [82.7, 863.0], [82.8, 863.0], [82.9, 863.0], [83.0, 863.0], [83.1, 863.0], [83.2, 863.0], [83.3, 863.0], [83.4, 863.0], [83.5, 863.0], [83.6, 863.0], [83.7, 863.0], [83.8, 863.0], [83.9, 863.0], [84.0, 865.0], [84.1, 865.0], [84.2, 865.0], [84.3, 865.0], [84.4, 865.0], [84.5, 865.0], [84.6, 865.0], [84.7, 865.0], [84.8, 865.0], [84.9, 865.0], [85.0, 866.0], [85.1, 866.0], [85.2, 866.0], [85.3, 866.0], [85.4, 866.0], [85.5, 866.0], [85.6, 866.0], [85.7, 866.0], [85.8, 866.0], [85.9, 866.0], [86.0, 866.0], [86.1, 866.0], [86.2, 866.0], [86.3, 866.0], [86.4, 866.0], [86.5, 866.0], [86.6, 866.0], [86.7, 866.0], [86.8, 866.0], [86.9, 866.0], [87.0, 867.0], [87.1, 867.0], [87.2, 867.0], [87.3, 867.0], [87.4, 867.0], [87.5, 867.0], [87.6, 867.0], [87.7, 867.0], [87.8, 867.0], [87.9, 867.0], [88.0, 867.0], [88.1, 867.0], [88.2, 867.0], [88.3, 867.0], [88.4, 867.0], [88.5, 867.0], [88.6, 867.0], [88.7, 867.0], [88.8, 867.0], [88.9, 867.0], [89.0, 867.0], [89.1, 867.0], [89.2, 867.0], [89.3, 867.0], [89.4, 867.0], [89.5, 867.0], [89.6, 867.0], [89.7, 867.0], [89.8, 867.0], [89.9, 867.0], [90.0, 868.0], [90.1, 868.0], [90.2, 868.0], [90.3, 868.0], [90.4, 868.0], [90.5, 868.0], [90.6, 868.0], [90.7, 868.0], [90.8, 868.0], [90.9, 868.0], [91.0, 872.0], [91.1, 872.0], [91.2, 872.0], [91.3, 872.0], [91.4, 872.0], [91.5, 872.0], [91.6, 872.0], [91.7, 872.0], [91.8, 872.0], [91.9, 872.0], [92.0, 872.0], [92.1, 872.0], [92.2, 872.0], [92.3, 872.0], [92.4, 872.0], [92.5, 872.0], [92.6, 872.0], [92.7, 872.0], [92.8, 872.0], [92.9, 872.0], [93.0, 872.0], [93.1, 872.0], [93.2, 872.0], [93.3, 872.0], [93.4, 872.0], [93.5, 872.0], [93.6, 872.0], [93.7, 872.0], [93.8, 872.0], [93.9, 872.0], [94.0, 873.0], [94.1, 873.0], [94.2, 873.0], [94.3, 873.0], [94.4, 873.0], [94.5, 873.0], [94.6, 873.0], [94.7, 873.0], [94.8, 873.0], [94.9, 873.0], [95.0, 874.0], [95.1, 874.0], [95.2, 874.0], [95.3, 874.0], [95.4, 874.0], [95.5, 874.0], [95.6, 874.0], [95.7, 874.0], [95.8, 874.0], [95.9, 874.0], [96.0, 875.0], [96.1, 875.0], [96.2, 875.0], [96.3, 875.0], [96.4, 875.0], [96.5, 875.0], [96.6, 875.0], [96.7, 875.0], [96.8, 875.0], [96.9, 875.0], [97.0, 879.0], [97.1, 879.0], [97.2, 879.0], [97.3, 879.0], [97.4, 879.0], [97.5, 879.0], [97.6, 879.0], [97.7, 879.0], [97.8, 879.0], [97.9, 879.0], [98.0, 880.0], [98.1, 880.0], [98.2, 880.0], [98.3, 880.0], [98.4, 880.0], [98.5, 880.0], [98.6, 880.0], [98.7, 880.0], [98.8, 880.0], [98.9, 880.0], [99.0, 887.0], [99.1, 887.0], [99.2, 887.0], [99.3, 887.0], [99.4, 887.0], [99.5, 887.0], [99.6, 887.0], [99.7, 887.0], [99.8, 887.0], [99.9, 887.0]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[0.0, 1689.0], [0.1, 1689.0], [0.2, 1689.0], [0.3, 1689.0], [0.4, 1689.0], [0.5, 1689.0], [0.6, 1689.0], [0.7, 1689.0], [0.8, 1689.0], [0.9, 1689.0], [1.0, 1696.0], [1.1, 1696.0], [1.2, 1696.0], [1.3, 1696.0], [1.4, 1696.0], [1.5, 1696.0], [1.6, 1696.0], [1.7, 1696.0], [1.8, 1696.0], [1.9, 1696.0], [2.0, 1701.0], [2.1, 1701.0], [2.2, 1701.0], [2.3, 1701.0], [2.4, 1701.0], [2.5, 1701.0], [2.6, 1701.0], [2.7, 1701.0], [2.8, 1701.0], [2.9, 1701.0], [3.0, 1702.0], [3.1, 1702.0], [3.2, 1702.0], [3.3, 1702.0], [3.4, 1702.0], [3.5, 1702.0], [3.6, 1702.0], [3.7, 1702.0], [3.8, 1702.0], [3.9, 1702.0], [4.0, 1704.0], [4.1, 1704.0], [4.2, 1704.0], [4.3, 1704.0], [4.4, 1704.0], [4.5, 1704.0], [4.6, 1704.0], [4.7, 1704.0], [4.8, 1704.0], [4.9, 1704.0], [5.0, 1705.0], [5.1, 1705.0], [5.2, 1705.0], [5.3, 1705.0], [5.4, 1705.0], [5.5, 1705.0], [5.6, 1705.0], [5.7, 1705.0], [5.8, 1705.0], [5.9, 1705.0], [6.0, 1706.0], [6.1, 1706.0], [6.2, 1706.0], [6.3, 1706.0], [6.4, 1706.0], [6.5, 1706.0], [6.6, 1706.0], [6.7, 1706.0], [6.8, 1706.0], [6.9, 1706.0], [7.0, 1709.0], [7.1, 1709.0], [7.2, 1709.0], [7.3, 1709.0], [7.4, 1709.0], [7.5, 1709.0], [7.6, 1709.0], [7.7, 1709.0], [7.8, 1709.0], [7.9, 1709.0], [8.0, 1710.0], [8.1, 1710.0], [8.2, 1710.0], [8.3, 1710.0], [8.4, 1710.0], [8.5, 1710.0], [8.6, 1710.0], [8.7, 1710.0], [8.8, 1710.0], [8.9, 1710.0], [9.0, 1710.0], [9.1, 1710.0], [9.2, 1710.0], [9.3, 1710.0], [9.4, 1710.0], [9.5, 1710.0], [9.6, 1710.0], [9.7, 1710.0], [9.8, 1710.0], [9.9, 1710.0], [10.0, 1710.0], [10.1, 1710.0], [10.2, 1710.0], [10.3, 1710.0], [10.4, 1710.0], [10.5, 1710.0], [10.6, 1710.0], [10.7, 1710.0], [10.8, 1710.0], [10.9, 1710.0], [11.0, 1711.0], [11.1, 1711.0], [11.2, 1711.0], [11.3, 1711.0], [11.4, 1711.0], [11.5, 1711.0], [11.6, 1711.0], [11.7, 1711.0], [11.8, 1711.0], [11.9, 1711.0], [12.0, 1713.0], [12.1, 1713.0], [12.2, 1713.0], [12.3, 1713.0], [12.4, 1713.0], [12.5, 1713.0], [12.6, 1713.0], [12.7, 1713.0], [12.8, 1713.0], [12.9, 1713.0], [13.0, 1714.0], [13.1, 1714.0], [13.2, 1714.0], [13.3, 1714.0], [13.4, 1714.0], [13.5, 1714.0], [13.6, 1714.0], [13.7, 1714.0], [13.8, 1714.0], [13.9, 1714.0], [14.0, 1716.0], [14.1, 1716.0], [14.2, 1716.0], [14.3, 1716.0], [14.4, 1716.0], [14.5, 1716.0], [14.6, 1716.0], [14.7, 1716.0], [14.8, 1716.0], [14.9, 1716.0], [15.0, 1720.0], [15.1, 1720.0], [15.2, 1720.0], [15.3, 1720.0], [15.4, 1720.0], [15.5, 1720.0], [15.6, 1720.0], [15.7, 1720.0], [15.8, 1720.0], [15.9, 1720.0], [16.0, 1721.0], [16.1, 1721.0], [16.2, 1721.0], [16.3, 1721.0], [16.4, 1721.0], [16.5, 1721.0], [16.6, 1721.0], [16.7, 1721.0], [16.8, 1721.0], [16.9, 1721.0], [17.0, 1722.0], [17.1, 1722.0], [17.2, 1722.0], [17.3, 1722.0], [17.4, 1722.0], [17.5, 1722.0], [17.6, 1722.0], [17.7, 1722.0], [17.8, 1722.0], [17.9, 1722.0], [18.0, 1730.0], [18.1, 1730.0], [18.2, 1730.0], [18.3, 1730.0], [18.4, 1730.0], [18.5, 1730.0], [18.6, 1730.0], [18.7, 1730.0], [18.8, 1730.0], [18.9, 1730.0], [19.0, 1730.0], [19.1, 1730.0], [19.2, 1730.0], [19.3, 1730.0], [19.4, 1730.0], [19.5, 1730.0], [19.6, 1730.0], [19.7, 1730.0], [19.8, 1730.0], [19.9, 1730.0], [20.0, 1734.0], [20.1, 1734.0], [20.2, 1734.0], [20.3, 1734.0], [20.4, 1734.0], [20.5, 1734.0], [20.6, 1734.0], [20.7, 1734.0], [20.8, 1734.0], [20.9, 1734.0], [21.0, 1735.0], [21.1, 1735.0], [21.2, 1735.0], [21.3, 1735.0], [21.4, 1735.0], [21.5, 1735.0], [21.6, 1735.0], [21.7, 1735.0], [21.8, 1735.0], [21.9, 1735.0], [22.0, 1736.0], [22.1, 1736.0], [22.2, 1736.0], [22.3, 1736.0], [22.4, 1736.0], [22.5, 1736.0], [22.6, 1736.0], [22.7, 1736.0], [22.8, 1736.0], [22.9, 1736.0], [23.0, 1738.0], [23.1, 1738.0], [23.2, 1738.0], [23.3, 1738.0], [23.4, 1738.0], [23.5, 1738.0], [23.6, 1738.0], [23.7, 1738.0], [23.8, 1738.0], [23.9, 1738.0], [24.0, 1740.0], [24.1, 1740.0], [24.2, 1740.0], [24.3, 1740.0], [24.4, 1740.0], [24.5, 1740.0], [24.6, 1740.0], [24.7, 1740.0], [24.8, 1740.0], [24.9, 1740.0], [25.0, 1744.0], [25.1, 1744.0], [25.2, 1744.0], [25.3, 1744.0], [25.4, 1744.0], [25.5, 1744.0], [25.6, 1744.0], [25.7, 1744.0], [25.8, 1744.0], [25.9, 1744.0], [26.0, 1744.0], [26.1, 1744.0], [26.2, 1744.0], [26.3, 1744.0], [26.4, 1744.0], [26.5, 1744.0], [26.6, 1744.0], [26.7, 1744.0], [26.8, 1744.0], [26.9, 1744.0], [27.0, 1754.0], [27.1, 1754.0], [27.2, 1754.0], [27.3, 1754.0], [27.4, 1754.0], [27.5, 1754.0], [27.6, 1754.0], [27.7, 1754.0], [27.8, 1754.0], [27.9, 1754.0], [28.0, 1757.0], [28.1, 1757.0], [28.2, 1757.0], [28.3, 1757.0], [28.4, 1757.0], [28.5, 1757.0], [28.6, 1757.0], [28.7, 1757.0], [28.8, 1757.0], [28.9, 1757.0], [29.0, 1787.0], [29.1, 1787.0], [29.2, 1787.0], [29.3, 1787.0], [29.4, 1787.0], [29.5, 1787.0], [29.6, 1787.0], [29.7, 1787.0], [29.8, 1787.0], [29.9, 1787.0], [30.0, 8461.0], [30.1, 8461.0], [30.2, 8461.0], [30.3, 8461.0], [30.4, 8461.0], [30.5, 8461.0], [30.6, 8461.0], [30.7, 8461.0], [30.8, 8461.0], [30.9, 8461.0], [31.0, 9432.0], [31.1, 9432.0], [31.2, 9432.0], [31.3, 9432.0], [31.4, 9432.0], [31.5, 9432.0], [31.6, 9432.0], [31.7, 9432.0], [31.8, 9432.0], [31.9, 9432.0], [32.0, 9523.0], [32.1, 9523.0], [32.2, 9523.0], [32.3, 9523.0], [32.4, 9523.0], [32.5, 9523.0], [32.6, 9523.0], [32.7, 9523.0], [32.8, 9523.0], [32.9, 9523.0], [33.0, 9523.0], [33.1, 9523.0], [33.2, 9523.0], [33.3, 9523.0], [33.4, 9523.0], [33.5, 9523.0], [33.6, 9523.0], [33.7, 9523.0], [33.8, 9523.0], [33.9, 9523.0], [34.0, 9730.0], [34.1, 9730.0], [34.2, 9730.0], [34.3, 9730.0], [34.4, 9730.0], [34.5, 9730.0], [34.6, 9730.0], [34.7, 9730.0], [34.8, 9730.0], [34.9, 9730.0], [35.0, 9804.0], [35.1, 9804.0], [35.2, 9804.0], [35.3, 9804.0], [35.4, 9804.0], [35.5, 9804.0], [35.6, 9804.0], [35.7, 9804.0], [35.8, 9804.0], [35.9, 9804.0], [36.0, 9852.0], [36.1, 9852.0], [36.2, 9852.0], [36.3, 9852.0], [36.4, 9852.0], [36.5, 9852.0], [36.6, 9852.0], [36.7, 9852.0], [36.8, 9852.0], [36.9, 9852.0], [37.0, 9944.0], [37.1, 9944.0], [37.2, 9944.0], [37.3, 9944.0], [37.4, 9944.0], [37.5, 9944.0], [37.6, 9944.0], [37.7, 9944.0], [37.8, 9944.0], [37.9, 9944.0], [38.0, 10036.0], [38.1, 10036.0], [38.2, 10036.0], [38.3, 10036.0], [38.4, 10036.0], [38.5, 10036.0], [38.6, 10036.0], [38.7, 10036.0], [38.8, 10036.0], [38.9, 10036.0], [39.0, 10145.0], [39.1, 10145.0], [39.2, 10145.0], [39.3, 10145.0], [39.4, 10145.0], [39.5, 10145.0], [39.6, 10145.0], [39.7, 10145.0], [39.8, 10145.0], [39.9, 10145.0], [40.0, 10217.0], [40.1, 10217.0], [40.2, 10217.0], [40.3, 10217.0], [40.4, 10217.0], [40.5, 10217.0], [40.6, 10217.0], [40.7, 10217.0], [40.8, 10217.0], [40.9, 10217.0], [41.0, 10531.0], [41.1, 10531.0], [41.2, 10531.0], [41.3, 10531.0], [41.4, 10531.0], [41.5, 10531.0], [41.6, 10531.0], [41.7, 10531.0], [41.8, 10531.0], [41.9, 10531.0], [42.0, 10637.0], [42.1, 10637.0], [42.2, 10637.0], [42.3, 10637.0], [42.4, 10637.0], [42.5, 10637.0], [42.6, 10637.0], [42.7, 10637.0], [42.8, 10637.0], [42.9, 10637.0], [43.0, 11143.0], [43.1, 11143.0], [43.2, 11143.0], [43.3, 11143.0], [43.4, 11143.0], [43.5, 11143.0], [43.6, 11143.0], [43.7, 11143.0], [43.8, 11143.0], [43.9, 11143.0], [44.0, 11333.0], [44.1, 11333.0], [44.2, 11333.0], [44.3, 11333.0], [44.4, 11333.0], [44.5, 11333.0], [44.6, 11333.0], [44.7, 11333.0], [44.8, 11333.0], [44.9, 11333.0], [45.0, 14389.0], [45.1, 14389.0], [45.2, 14389.0], [45.3, 14389.0], [45.4, 14389.0], [45.5, 14389.0], [45.6, 14389.0], [45.7, 14389.0], [45.8, 14389.0], [45.9, 14389.0], [46.0, 14931.0], [46.1, 14931.0], [46.2, 14931.0], [46.3, 14931.0], [46.4, 14931.0], [46.5, 14931.0], [46.6, 14931.0], [46.7, 14931.0], [46.8, 14931.0], [46.9, 14931.0], [47.0, 14942.0], [47.1, 14942.0], [47.2, 14942.0], [47.3, 14942.0], [47.4, 14942.0], [47.5, 14942.0], [47.6, 14942.0], [47.7, 14942.0], [47.8, 14942.0], [47.9, 14942.0], [48.0, 15332.0], [48.1, 15332.0], [48.2, 15332.0], [48.3, 15332.0], [48.4, 15332.0], [48.5, 15332.0], [48.6, 15332.0], [48.7, 15332.0], [48.8, 15332.0], [48.9, 15332.0], [49.0, 15354.0], [49.1, 15354.0], [49.2, 15354.0], [49.3, 15354.0], [49.4, 15354.0], [49.5, 15354.0], [49.6, 15354.0], [49.7, 15354.0], [49.8, 15354.0], [49.9, 15354.0], [50.0, 16064.0], [50.1, 16064.0], [50.2, 16064.0], [50.3, 16064.0], [50.4, 16064.0], [50.5, 16064.0], [50.6, 16064.0], [50.7, 16064.0], [50.8, 16064.0], [50.9, 16064.0], [51.0, 16129.0], [51.1, 16129.0], [51.2, 16129.0], [51.3, 16129.0], [51.4, 16129.0], [51.5, 16129.0], [51.6, 16129.0], [51.7, 16129.0], [51.8, 16129.0], [51.9, 16129.0], [52.0, 16142.0], [52.1, 16142.0], [52.2, 16142.0], [52.3, 16142.0], [52.4, 16142.0], [52.5, 16142.0], [52.6, 16142.0], [52.7, 16142.0], [52.8, 16142.0], [52.9, 16142.0], [53.0, 16146.0], [53.1, 16146.0], [53.2, 16146.0], [53.3, 16146.0], [53.4, 16146.0], [53.5, 16146.0], [53.6, 16146.0], [53.7, 16146.0], [53.8, 16146.0], [53.9, 16146.0], [54.0, 16268.0], [54.1, 16268.0], [54.2, 16268.0], [54.3, 16268.0], [54.4, 16268.0], [54.5, 16268.0], [54.6, 16268.0], [54.7, 16268.0], [54.8, 16268.0], [54.9, 16268.0], [55.0, 16545.0], [55.1, 16545.0], [55.2, 16545.0], [55.3, 16545.0], [55.4, 16545.0], [55.5, 16545.0], [55.6, 16545.0], [55.7, 16545.0], [55.8, 16545.0], [55.9, 16545.0], [56.0, 16651.0], [56.1, 16651.0], [56.2, 16651.0], [56.3, 16651.0], [56.4, 16651.0], [56.5, 16651.0], [56.6, 16651.0], [56.7, 16651.0], [56.8, 16651.0], [56.9, 16651.0], [57.0, 16914.0], [57.1, 16914.0], [57.2, 16914.0], [57.3, 16914.0], [57.4, 16914.0], [57.5, 16914.0], [57.6, 16914.0], [57.7, 16914.0], [57.8, 16914.0], [57.9, 16914.0], [58.0, 17533.0], [58.1, 17533.0], [58.2, 17533.0], [58.3, 17533.0], [58.4, 17533.0], [58.5, 17533.0], [58.6, 17533.0], [58.7, 17533.0], [58.8, 17533.0], [58.9, 17533.0], [59.0, 20348.0], [59.1, 20348.0], [59.2, 20348.0], [59.3, 20348.0], [59.4, 20348.0], [59.5, 20348.0], [59.6, 20348.0], [59.7, 20348.0], [59.8, 20348.0], [59.9, 20348.0], [60.0, 21427.0], [60.1, 21427.0], [60.2, 21427.0], [60.3, 21427.0], [60.4, 21427.0], [60.5, 21427.0], [60.6, 21427.0], [60.7, 21427.0], [60.8, 21427.0], [60.9, 21427.0], [61.0, 21781.0], [61.1, 21781.0], [61.2, 21781.0], [61.3, 21781.0], [61.4, 21781.0], [61.5, 21781.0], [61.6, 21781.0], [61.7, 21781.0], [61.8, 21781.0], [61.9, 21781.0], [62.0, 21834.0], [62.1, 21834.0], [62.2, 21834.0], [62.3, 21834.0], [62.4, 21834.0], [62.5, 21834.0], [62.6, 21834.0], [62.7, 21834.0], [62.8, 21834.0], [62.9, 21834.0], [63.0, 21889.0], [63.1, 21889.0], [63.2, 21889.0], [63.3, 21889.0], [63.4, 21889.0], [63.5, 21889.0], [63.6, 21889.0], [63.7, 21889.0], [63.8, 21889.0], [63.9, 21889.0], [64.0, 21945.0], [64.1, 21945.0], [64.2, 21945.0], [64.3, 21945.0], [64.4, 21945.0], [64.5, 21945.0], [64.6, 21945.0], [64.7, 21945.0], [64.8, 21945.0], [64.9, 21945.0], [65.0, 22043.0], [65.1, 22043.0], [65.2, 22043.0], [65.3, 22043.0], [65.4, 22043.0], [65.5, 22043.0], [65.6, 22043.0], [65.7, 22043.0], [65.8, 22043.0], [65.9, 22043.0], [66.0, 22126.0], [66.1, 22126.0], [66.2, 22126.0], [66.3, 22126.0], [66.4, 22126.0], [66.5, 22126.0], [66.6, 22126.0], [66.7, 22126.0], [66.8, 22126.0], [66.9, 22126.0], [67.0, 22128.0], [67.1, 22128.0], [67.2, 22128.0], [67.3, 22128.0], [67.4, 22128.0], [67.5, 22128.0], [67.6, 22128.0], [67.7, 22128.0], [67.8, 22128.0], [67.9, 22128.0], [68.0, 22246.0], [68.1, 22246.0], [68.2, 22246.0], [68.3, 22246.0], [68.4, 22246.0], [68.5, 22246.0], [68.6, 22246.0], [68.7, 22246.0], [68.8, 22246.0], [68.9, 22246.0], [69.0, 22253.0], [69.1, 22253.0], [69.2, 22253.0], [69.3, 22253.0], [69.4, 22253.0], [69.5, 22253.0], [69.6, 22253.0], [69.7, 22253.0], [69.8, 22253.0], [69.9, 22253.0], [70.0, 23142.0], [70.1, 23142.0], [70.2, 23142.0], [70.3, 23142.0], [70.4, 23142.0], [70.5, 23142.0], [70.6, 23142.0], [70.7, 23142.0], [70.8, 23142.0], [70.9, 23142.0], [71.0, 23156.0], [71.1, 23156.0], [71.2, 23156.0], [71.3, 23156.0], [71.4, 23156.0], [71.5, 23156.0], [71.6, 23156.0], [71.7, 23156.0], [71.8, 23156.0], [71.9, 23156.0], [72.0, 23557.0], [72.1, 23557.0], [72.2, 23557.0], [72.3, 23557.0], [72.4, 23557.0], [72.5, 23557.0], [72.6, 23557.0], [72.7, 23557.0], [72.8, 23557.0], [72.9, 23557.0], [73.0, 24934.0], [73.1, 24934.0], [73.2, 24934.0], [73.3, 24934.0], [73.4, 24934.0], [73.5, 24934.0], [73.6, 24934.0], [73.7, 24934.0], [73.8, 24934.0], [73.9, 24934.0], [74.0, 26717.0], [74.1, 26717.0], [74.2, 26717.0], [74.3, 26717.0], [74.4, 26717.0], [74.5, 26717.0], [74.6, 26717.0], [74.7, 26717.0], [74.8, 26717.0], [74.9, 26717.0], [75.0, 26841.0], [75.1, 26841.0], [75.2, 26841.0], [75.3, 26841.0], [75.4, 26841.0], [75.5, 26841.0], [75.6, 26841.0], [75.7, 26841.0], [75.8, 26841.0], [75.9, 26841.0], [76.0, 27128.0], [76.1, 27128.0], [76.2, 27128.0], [76.3, 27128.0], [76.4, 27128.0], [76.5, 27128.0], [76.6, 27128.0], [76.7, 27128.0], [76.8, 27128.0], [76.9, 27128.0], [77.0, 27144.0], [77.1, 27144.0], [77.2, 27144.0], [77.3, 27144.0], [77.4, 27144.0], [77.5, 27144.0], [77.6, 27144.0], [77.7, 27144.0], [77.8, 27144.0], [77.9, 27144.0], [78.0, 27322.0], [78.1, 27322.0], [78.2, 27322.0], [78.3, 27322.0], [78.4, 27322.0], [78.5, 27322.0], [78.6, 27322.0], [78.7, 27322.0], [78.8, 27322.0], [78.9, 27322.0], [79.0, 27638.0], [79.1, 27638.0], [79.2, 27638.0], [79.3, 27638.0], [79.4, 27638.0], [79.5, 27638.0], [79.6, 27638.0], [79.7, 27638.0], [79.8, 27638.0], [79.9, 27638.0], [80.0, 27717.0], [80.1, 27717.0], [80.2, 27717.0], [80.3, 27717.0], [80.4, 27717.0], [80.5, 27717.0], [80.6, 27717.0], [80.7, 27717.0], [80.8, 27717.0], [80.9, 27717.0], [81.0, 27726.0], [81.1, 27726.0], [81.2, 27726.0], [81.3, 27726.0], [81.4, 27726.0], [81.5, 27726.0], [81.6, 27726.0], [81.7, 27726.0], [81.8, 27726.0], [81.9, 27726.0], [82.0, 27822.0], [82.1, 27822.0], [82.2, 27822.0], [82.3, 27822.0], [82.4, 27822.0], [82.5, 27822.0], [82.6, 27822.0], [82.7, 27822.0], [82.8, 27822.0], [82.9, 27822.0], [83.0, 28139.0], [83.1, 28139.0], [83.2, 28139.0], [83.3, 28139.0], [83.4, 28139.0], [83.5, 28139.0], [83.6, 28139.0], [83.7, 28139.0], [83.8, 28139.0], [83.9, 28139.0], [84.0, 28233.0], [84.1, 28233.0], [84.2, 28233.0], [84.3, 28233.0], [84.4, 28233.0], [84.5, 28233.0], [84.6, 28233.0], [84.7, 28233.0], [84.8, 28233.0], [84.9, 28233.0], [85.0, 28345.0], [85.1, 28345.0], [85.2, 28345.0], [85.3, 28345.0], [85.4, 28345.0], [85.5, 28345.0], [85.6, 28345.0], [85.7, 28345.0], [85.8, 28345.0], [85.9, 28345.0], [86.0, 28463.0], [86.1, 28463.0], [86.2, 28463.0], [86.3, 28463.0], [86.4, 28463.0], [86.5, 28463.0], [86.6, 28463.0], [86.7, 28463.0], [86.8, 28463.0], [86.9, 28463.0], [87.0, 29232.0], [87.1, 29232.0], [87.2, 29232.0], [87.3, 29232.0], [87.4, 29232.0], [87.5, 29232.0], [87.6, 29232.0], [87.7, 29232.0], [87.8, 29232.0], [87.9, 29232.0], [88.0, 31044.0], [88.1, 31044.0], [88.2, 31044.0], [88.3, 31044.0], [88.4, 31044.0], [88.5, 31044.0], [88.6, 31044.0], [88.7, 31044.0], [88.8, 31044.0], [88.9, 31044.0], [89.0, 32350.0], [89.1, 32350.0], [89.2, 32350.0], [89.3, 32350.0], [89.4, 32350.0], [89.5, 32350.0], [89.6, 32350.0], [89.7, 32350.0], [89.8, 32350.0], [89.9, 32350.0], [90.0, 32413.0], [90.1, 32413.0], [90.2, 32413.0], [90.3, 32413.0], [90.4, 32413.0], [90.5, 32413.0], [90.6, 32413.0], [90.7, 32413.0], [90.8, 32413.0], [90.9, 32413.0], [91.0, 32548.0], [91.1, 32548.0], [91.2, 32548.0], [91.3, 32548.0], [91.4, 32548.0], [91.5, 32548.0], [91.6, 32548.0], [91.7, 32548.0], [91.8, 32548.0], [91.9, 32548.0], [92.0, 32601.0], [92.1, 32601.0], [92.2, 32601.0], [92.3, 32601.0], [92.4, 32601.0], [92.5, 32601.0], [92.6, 32601.0], [92.7, 32601.0], [92.8, 32601.0], [92.9, 32601.0], [93.0, 32730.0], [93.1, 32730.0], [93.2, 32730.0], [93.3, 32730.0], [93.4, 32730.0], [93.5, 32730.0], [93.6, 32730.0], [93.7, 32730.0], [93.8, 32730.0], [93.9, 32730.0], [94.0, 32739.0], [94.1, 32739.0], [94.2, 32739.0], [94.3, 32739.0], [94.4, 32739.0], [94.5, 32739.0], [94.6, 32739.0], [94.7, 32739.0], [94.8, 32739.0], [94.9, 32739.0], [95.0, 32850.0], [95.1, 32850.0], [95.2, 32850.0], [95.3, 32850.0], [95.4, 32850.0], [95.5, 32850.0], [95.6, 32850.0], [95.7, 32850.0], [95.8, 32850.0], [95.9, 32850.0], [96.0, 33040.0], [96.1, 33040.0], [96.2, 33040.0], [96.3, 33040.0], [96.4, 33040.0], [96.5, 33040.0], [96.6, 33040.0], [96.7, 33040.0], [96.8, 33040.0], [96.9, 33040.0], [97.0, 33041.0], [97.1, 33041.0], [97.2, 33041.0], [97.3, 33041.0], [97.4, 33041.0], [97.5, 33041.0], [97.6, 33041.0], [97.7, 33041.0], [97.8, 33041.0], [97.9, 33041.0], [98.0, 33219.0], [98.1, 33219.0], [98.2, 33219.0], [98.3, 33219.0], [98.4, 33219.0], [98.5, 33219.0], [98.6, 33219.0], [98.7, 33219.0], [98.8, 33219.0], [98.9, 33219.0], [99.0, 33234.0], [99.1, 33234.0], [99.2, 33234.0], [99.3, 33234.0], [99.4, 33234.0], [99.5, 33234.0], [99.6, 33234.0], [99.7, 33234.0], [99.8, 33234.0], [99.9, 33234.0]], "isOverall": false, "label": "blog", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 100.0, "series": [{"data": [[800.0, 29.0], [900.0, 1.0], [7600.0, 1.0], [8600.0, 2.0], [8500.0, 1.0], [8800.0, 1.0], [9000.0, 2.0], [9100.0, 1.0], [9200.0, 1.0], [8900.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [9700.0, 1.0], [10200.0, 1.0], [10400.0, 1.0], [13500.0, 1.0], [14000.0, 2.0], [14400.0, 2.0], [15200.0, 3.0], [15100.0, 1.0], [15300.0, 1.0], [15700.0, 1.0], [15600.0, 1.0], [16000.0, 1.0], [16600.0, 1.0], [19400.0, 1.0], [20500.0, 1.0], [20900.0, 2.0], [21000.0, 2.0], [21200.0, 2.0], [21100.0, 1.0], [21300.0, 2.0], [22200.0, 2.0], [22600.0, 1.0], [24000.0, 1.0], [25800.0, 1.0], [25900.0, 1.0], [26200.0, 2.0], [26400.0, 1.0], [26800.0, 2.0], [26700.0, 1.0], [26900.0, 1.0], [27200.0, 1.0], [27400.0, 1.0], [27300.0, 1.0], [27500.0, 1.0], [28300.0, 1.0], [30100.0, 1.0], [31500.0, 1.0], [31400.0, 1.0], [31700.0, 1.0], [31600.0, 1.0], [31800.0, 2.0], [32100.0, 2.0], [32300.0, 2.0], [31900.0, 1.0]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[800.0, 100.0]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[1600.0, 2.0], [1700.0, 28.0], [8400.0, 1.0], [9500.0, 2.0], [9400.0, 1.0], [9700.0, 1.0], [10200.0, 1.0], [9800.0, 2.0], [10000.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10500.0, 1.0], [10600.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [14300.0, 1.0], [14900.0, 2.0], [15300.0, 2.0], [16100.0, 3.0], [16000.0, 1.0], [16200.0, 1.0], [16600.0, 1.0], [16500.0, 1.0], [16900.0, 1.0], [17500.0, 1.0], [20300.0, 1.0], [21400.0, 1.0], [21700.0, 1.0], [21800.0, 2.0], [22100.0, 2.0], [22000.0, 1.0], [22200.0, 2.0], [21900.0, 1.0], [23100.0, 2.0], [23500.0, 1.0], [24900.0, 1.0], [26700.0, 1.0], [26800.0, 1.0], [27100.0, 2.0], [27300.0, 1.0], [27600.0, 1.0], [27700.0, 2.0], [27800.0, 1.0], [28100.0, 1.0], [28300.0, 1.0], [28200.0, 1.0], [28400.0, 1.0], [29200.0, 1.0], [31000.0, 1.0], [32700.0, 2.0], [32400.0, 1.0], [32300.0, 1.0], [32600.0, 1.0], [32500.0, 1.0], [33000.0, 2.0], [33200.0, 2.0], [32800.0, 1.0]], "isOverall": false, "label": "blog", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 130.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 170.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 130.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 170.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 49.56000000000006, "minX": 1.68585216E12, "maxY": 49.56000000000006, "series": [{"data": [[1.68585216E12, 49.56000000000006]], "isOverall": false, "label": "TMSSICT", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68585216E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 834.0, "minX": 1.0, "maxY": 33234.0, "series": [{"data": [[2.0, 32381.0], [3.0, 32378.0], [4.0, 31693.0], [5.0, 31755.0], [6.0, 31893.0], [7.0, 32187.0], [8.0, 32182.0], [9.0, 31489.0], [10.0, 31579.0], [11.0, 31879.0], [12.0, 30190.0], [13.0, 28385.0], [14.0, 27589.0], [15.0, 27388.0], [16.0, 27488.0], [17.0, 27283.0], [18.0, 26979.0], [19.0, 26785.0], [20.0, 26877.0], [21.0, 26484.0], [22.0, 26878.0], [23.0, 26282.0], [24.0, 26284.0], [25.0, 25979.0], [26.0, 25875.0], [27.0, 24082.0], [28.0, 22682.0], [29.0, 22288.0], [30.0, 22285.0], [31.0, 21381.0], [33.0, 21086.0], [32.0, 20982.0], [35.0, 21190.0], [34.0, 21390.0], [37.0, 21278.0], [36.0, 21281.0], [39.0, 20933.0], [38.0, 21038.0], [41.0, 19483.0], [40.0, 20582.0], [43.0, 16074.0], [42.0, 16678.0], [45.0, 15388.0], [44.0, 15685.0], [47.0, 15191.0], [46.0, 15787.0], [49.0, 15277.0], [48.0, 15284.0], [51.0, 15282.0], [50.0, 14487.0], [53.0, 14087.0], [52.0, 14484.0], [55.0, 13532.0], [54.0, 14084.0], [57.0, 878.0], [56.0, 10296.0], [59.0, 10494.0], [58.0, 861.0], [61.0, 8938.0], [60.0, 866.0], [63.0, 9283.0], [62.0, 877.0], [67.0, 860.0], [66.0, 9778.0], [65.0, 853.0], [64.0, 9085.0], [71.0, 9005.0], [70.0, 9676.0], [69.0, 9197.0], [68.0, 866.0], [75.0, 866.0], [74.0, 876.0], [73.0, 871.0], [72.0, 862.0], [79.0, 880.0], [78.0, 854.0], [77.0, 9365.0], [76.0, 8879.0], [83.0, 857.0], [82.0, 842.0], [81.0, 8674.0], [80.0, 862.0], [87.0, 1491.4545454545455], [86.0, 2813.5], [85.0, 863.0], [84.0, 8584.0], [1.0, 31993.0]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[49.559999999999995, 14550.440000000002]], "isOverall": false, "label": "blog-0-Aggregated", "isController": false}, {"data": [[2.0, 852.0], [3.0, 841.0], [4.0, 855.0], [5.0, 846.0], [6.0, 846.0], [7.0, 854.0], [8.0, 858.0], [9.0, 861.0], [10.0, 834.0], [11.0, 851.0], [12.0, 854.0], [13.0, 848.0], [14.0, 874.0], [15.0, 846.0], [16.0, 858.0], [17.0, 856.0], [18.0, 844.0], [19.0, 854.0], [20.0, 849.0], [21.0, 839.0], [22.0, 839.0], [23.0, 847.0], [24.0, 861.0], [25.0, 863.0], [26.0, 843.0], [27.0, 851.0], [28.0, 875.0], [29.0, 868.0], [30.0, 857.0], [31.0, 872.0], [33.0, 860.0], [32.0, 852.0], [35.0, 854.0], [34.0, 856.0], [37.0, 851.0], [36.0, 845.0], [39.0, 849.0], [38.0, 851.0], [41.0, 866.0], [40.0, 846.0], [43.0, 840.0], [42.0, 856.0], [45.0, 880.0], [44.0, 861.0], [47.0, 873.0], [46.0, 865.0], [49.0, 852.0], [48.0, 863.0], [51.0, 861.0], [50.0, 867.0], [53.0, 856.0], [52.0, 848.0], [55.0, 858.0], [54.0, 847.0], [57.0, 879.0], [56.0, 847.0], [59.0, 838.0], [58.0, 849.0], [61.0, 867.0], [60.0, 841.0], [63.0, 862.0], [62.0, 861.0], [67.0, 854.0], [66.0, 859.0], [65.0, 850.0], [64.0, 859.0], [71.0, 847.0], [70.0, 854.0], [69.0, 840.0], [68.0, 851.0], [75.0, 856.0], [74.0, 867.0], [73.0, 872.0], [72.0, 848.0], [79.0, 860.0], [78.0, 847.0], [77.0, 852.0], [76.0, 851.0], [83.0, 847.0], [82.0, 847.0], [81.0, 848.0], [80.0, 872.0], [87.0, 853.2727272727273], [86.0, 844.5], [85.0, 847.0], [84.0, 848.0], [1.0, 856.0]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[49.559999999999995, 853.93]], "isOverall": false, "label": "blog-1-Aggregated", "isController": false}, {"data": [[2.0, 33234.0], [3.0, 33219.0], [4.0, 32548.0], [5.0, 32601.0], [6.0, 32739.0], [7.0, 33041.0], [8.0, 33040.0], [9.0, 32350.0], [10.0, 32413.0], [11.0, 32730.0], [12.0, 31044.0], [13.0, 29232.0], [14.0, 28463.0], [15.0, 28233.0], [16.0, 28345.0], [17.0, 28139.0], [18.0, 27822.0], [19.0, 27638.0], [20.0, 27726.0], [21.0, 27322.0], [22.0, 27717.0], [23.0, 27128.0], [24.0, 27144.0], [25.0, 26841.0], [26.0, 26717.0], [27.0, 24934.0], [28.0, 23557.0], [29.0, 23156.0], [30.0, 23142.0], [31.0, 22253.0], [33.0, 21945.0], [32.0, 21834.0], [35.0, 22043.0], [34.0, 22246.0], [37.0, 22128.0], [36.0, 22126.0], [39.0, 21781.0], [38.0, 21889.0], [41.0, 20348.0], [40.0, 21427.0], [43.0, 16914.0], [42.0, 17533.0], [45.0, 16268.0], [44.0, 16545.0], [47.0, 16064.0], [46.0, 16651.0], [49.0, 16129.0], [48.0, 16146.0], [51.0, 16142.0], [50.0, 15354.0], [53.0, 14942.0], [52.0, 15332.0], [55.0, 14389.0], [54.0, 14931.0], [57.0, 1757.0], [56.0, 11143.0], [59.0, 11333.0], [58.0, 1709.0], [61.0, 9804.0], [60.0, 1706.0], [63.0, 10145.0], [62.0, 1738.0], [67.0, 1713.0], [66.0, 10637.0], [65.0, 1702.0], [64.0, 9944.0], [71.0, 9852.0], [70.0, 10531.0], [69.0, 10036.0], [68.0, 1716.0], [75.0, 1722.0], [74.0, 1744.0], [73.0, 1744.0], [72.0, 1710.0], [79.0, 1740.0], [78.0, 1701.0], [77.0, 10217.0], [76.0, 9730.0], [83.0, 1705.0], [82.0, 1689.0], [81.0, 9523.0], [80.0, 1734.0], [87.0, 2345.272727272727], [86.0, 3658.25], [85.0, 1711.0], [84.0, 9432.0], [1.0, 32850.0]], "isOverall": false, "label": "blog", "isController": false}, {"data": [[49.559999999999995, 15404.240000000002]], "isOverall": false, "label": "blog-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 87.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 790.0, "minX": 1.68585216E12, "maxY": 272947.0, "series": [{"data": [[1.68585216E12, 272947.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68585216E12, 790.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68585216E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 853.93, "minX": 1.68585216E12, "maxY": 15404.240000000002, "series": [{"data": [[1.68585216E12, 14550.440000000002]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[1.68585216E12, 853.93]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[1.68585216E12, 15404.240000000002]], "isOverall": false, "label": "blog", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68585216E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 494.13, "minX": 1.68585216E12, "maxY": 14550.360000000002, "series": [{"data": [[1.68585216E12, 14550.360000000002]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[1.68585216E12, 494.13]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[1.68585216E12, 14550.360000000002]], "isOverall": false, "label": "blog", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68585216E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68585216E12, "maxY": 635.8299999999997, "series": [{"data": [[1.68585216E12, 635.8299999999997]], "isOverall": false, "label": "blog-0", "isController": false}, {"data": [[1.68585216E12, 0.0]], "isOverall": false, "label": "blog-1", "isController": false}, {"data": [[1.68585216E12, 635.8299999999997]], "isOverall": false, "label": "blog", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68585216E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 831.0, "minX": 1.68585216E12, "maxY": 33234.0, "series": [{"data": [[1.68585216E12, 33234.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68585216E12, 28107.30000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68585216E12, 33040.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68585216E12, 32172.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68585216E12, 831.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68585216E12, 1732.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68585216E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 871.0, "minX": 1.0, "maxY": 31993.0, "series": [{"data": [[2.0, 14338.0], [8.0, 22270.5], [39.0, 871.0], [11.0, 16207.0], [47.0, 1689.0], [3.0, 16796.0], [13.0, 21390.0], [14.0, 16702.0], [15.0, 21381.0], [16.0, 15283.0], [1.0, 24082.0], [17.0, 31993.0], [5.0, 14085.5], [21.0, 874.0], [23.0, 1702.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 853.0, "minX": 1.0, "maxY": 31755.0, "series": [{"data": [[2.0, 13487.0], [8.0, 21833.0], [39.0, 863.0], [11.0, 15536.5], [47.0, 862.0], [3.0, 16376.0], [13.0, 21190.0], [14.0, 16131.5], [15.0, 20982.0], [16.0, 15234.0], [1.0, 24082.0], [17.0, 31755.0], [5.0, 13808.0], [21.0, 870.0], [23.0, 853.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68585216E12, "maxY": 5.0, "series": [{"data": [[1.68585216E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68585216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.68585216E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.68585216E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68585216E12, 1.6666666666666667]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68585216E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.68585216E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.68585216E12, 1.6666666666666667]], "isOverall": false, "label": "blog-1-success", "isController": false}, {"data": [[1.68585216E12, 1.6666666666666667]], "isOverall": false, "label": "blog-0-success", "isController": false}, {"data": [[1.68585216E12, 1.6666666666666667]], "isOverall": false, "label": "blog-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68585216E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68585216E12, "maxY": 5.0, "series": [{"data": [[1.68585216E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68585216E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

